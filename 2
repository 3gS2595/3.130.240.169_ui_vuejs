<template>
  <div class="contentView">
    <DataView :value="props.contentData" :layout="layout" >

      <template #header>
        <div class="flex justify-content-start">
          <DataViewLayoutOptions v-model="layout" />
          </div>
      </template>

      <template #list="slotProps">
        <div class="col-12">
          <div v-if="slotProps.data.file_type === '.txt'">
              <div class="cgb-0-txt">
                <a>{{ slotProps.data.description }}</a>
              </div>
            </div>
          <div v-else >
            <vue-load-image>
              <template v-slot:image>
                <img class="w-9" :src="`${slotProps.data.signed_url}`"/>
              </template>
              <template v-slot:preloader>
                <img class="w-9" src="image-loader.gif" rel='preload'/>
              </template>
              <template v-slot:error>
                Image load fails
              </template>
            </vue-load-image>
          </div>
          <span class="flex align-items-left gap-2">
            <span>{{ slotProps.data.created_at }}</span>
          </span>
        </div>
      </template>

      <template #grid="slotProps">
        <div class="cgb-0" id="contentBlock">

          <div v-if="slotProps.data.file_type === '.txt'">
            <div class='cgb-loaded'>
              <div class="cgb-0-txt">
                <a @click="overlayMilky(slotProps.index)">{{ slotProps.data.description }}</a>
              </div>
              <div class="cgb-0-info">
                <div class="file_path" >
                  {{ slotProps.data.time_posted }}
                </div>
                <div class="file_path" >
                  <a>{{ slotProps.data.author }}</a>
                </div>
              </div>
            </div>
          </div>

          <div v-else >
            <vue-load-image>
              <template v-slot:image>
                <div class='cgb-loaded'>
                  <img 
                    class="cgb-0-img" 
                    :src="`${slotProps.data.signed_url_nail}`" 
                    v-on:click="overlayMilky(slotProps.index)"
                  />
                  <div class="cgb-0-info">
                    <div class="file_path" >
                      {{ convertDate(slotProps.data.time_posted) }}
                    </div>
                    <div class="file_path" >
                      <a>{{ slotProps.data.author }}</a>
                    </div>
                  </div>
                </div>
              </template>

              <template v-slot:preloader>
                <div class ='cgb-loading' >
                  <div class="cgb-0-info">
                    <div class="file_path" >
                      {{ convertDate(slotProps.data.time_posted) }}
                    </div>
                    <div class="file_path" >
                      <a>{{ slotProps.data.author }}</a>
                    </div>
                  </div>
                </div>
              </template>

              <template v-slot:error>
                <div class='cgb-loaded'>
                  <div class="cgb-0-txt">
                    <a v-on:click="overlayMilky(slotProps.index)">
                      {{ slotProps.data.description }}
                    </a>
                  </div>
                  <div class="cgb-0-info">
                    <div class="file_path" >
                      {{ convertDate(slotProps.data.time_posted) }}
                    </div>
                    <div class="file_path" >
                      <a>{{ slotProps.data.author }}</a>
                    </div>
                  </div>
                </div>
              </template>
            </vue-load-image>
          </div>

        </div>
      </template>

    </DataView>
  </div>
</template>

<script setup lang="ts">
import { ref, watch, onMounted } from 'vue'
import DataView from 'primevue/dataview'
import DataViewLayoutOptions from 'primevue/dataviewlayoutoptions'
import VueLoadImage from 'vue-load-image'
import axios from 'axios'

import { filterStore } from '@/store/FilterStore'
import { ApiStore } from '@/store/ApiStore'
const store = filterStore()
const  pageNumber = ref<number>(2)
const layout = ref('grid')

const props = withDefaults(defineProps<{
   contentData: any[], 
   gridId: number
 }>(), {
     contentData: [],
     gridId:-1
 })

onMounted(() => {
  const targetNode = document.getElementsByClassName("p-grid")[props.gridId]
  MutateObserver.observe(targetNode, configMutate);
})

const convertDate = (datetime) => {
  const endTime = new Date()
  const startTime = new Date(datetime)
  let elapsed = (endTime - startTime)
  elapsed = elapsed / 1000 /60 / 60 / 24
  return ('-' + elapsed.toFixed(0) + 'd-' + startTime)
}

const fetchPage = async () => {
  ApiStore().fetchKernals(pageNumber.value)
  pageNumber.value = pageNumber.value + 1
}
const intersecting = (event) => {
  for (const e of event){
    if (e.isIntersecting) {
      observer.disconnect()
      fetchPage()
    }
  }
}
const config = { root: document.getElementsByClassName("p-grid")[props.gridId], threshold: 0.5 }
const observer = new IntersectionObserver(intersecting, config);

const callback = (mutationList, MutateObserver) => {
  for (const mutation of mutationList) {
    if (mutation.type === "childList") {
      observer.disconnect()
      watchIntersect(pageNumber)
    }
  }
}

const watchIntersect = (pageNum) =>{
  const el1 = document.getElementsByClassName("cgb-0")[(pageNum.value-1)*20-15]
  const el2 = document.getElementsByClassName("cgb-0")[(pageNum.value-1)*20-25]
  if (el1){ observer.observe(el1) } 
  if (el2){ observer.observe(el2) } 
  if (pageNumber.value - 2 !== 0) {
    const elr1 = document.getElementsByClassName("cgb-0")[(pageNum.value-2)*20-15]
    const elr2 = document.getElementsByClassName("cgb-0")[(pageNum.value-2)*20-25]
    if (elr1) { observer.unobserve(elr1) }
    if (elr2) { observer.unobserve(elr2) }
  }
}
const configMutate = { childList: true };
const MutateObserver = new MutationObserver(callback);

// if api reset reset pagenum 
watch(
  () => props.contentData,
  () => { 
    if(props.contentData.length < 20){
      pageNumber.value = 2
    }
  }
)

let numClicks = 0
const overlayMilky = (ind) => {
  numClicks++;
  if (numClicks === 1) {
    setTimeout(function() {
      switch(numClicks) {
        case 1:
          if (store.lightBoxIndex === -1) {
            store.setLightBoxView(!store.lightBoxView)
          }
          store.setLightBoxIndex(ind)
          break;
      }
    numClicks = 0;
  }, 200);
 }
}
</script>
